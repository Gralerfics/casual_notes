[零碎]
	data_save.py 用到 sudo apt install ros-noetic-rospy-message-converter，没有要装一下
	VSCode 配置 ROS 开发环境，装插件 Ctrl + Shift + P - ROS: Update Python Path 自动更新路径，见另一处笔记
		自动更新的是绝对路径，换成相对的似乎好一点，以及 teach-repeat 这个目录分类乱七八糟，
		还有个 image_processing 在 ./src/teach_repeat 里，按某个脚本的需要还要手动加一下 ./src：
			{
			    "python.autoComplete.extraPaths": [
				"/opt/ros/noetic/lib/python3/dist-packages",
				"../../devel/lib/python3/dist-packages",
				"./src"
			    ],
			    "python.analysis.extraPaths": [
				"/opt/ros/noetic/lib/python3/dist-packages",
				"../../devel/lib/python3/dist-packages",
				"./src"
			    ]
			}
		注意如果再让它更新它会覆盖，要么就不要再用插件的 update，要么似乎有用户配置的 json 给它加进去？



[使用 Webots] TurtleBot3 Burger 为例
	[Webots 使用零碎记录]
		1、注意保存是 Ctrl + Shift + S，或者手点，注意保存，以及修改时停下仿真再修改；
		2、右键机器人对象可以：
			显示机器人窗口 —— 打开一个可以查看机器人状态和各传感器数据的页面
			编辑控制器 —— 控制器的源码，不过这里用 ros 控制的话选择的是预设的 ros 控制器，不用修改
			Overlays —— 一些浮动窗口显示开关，例如摄像头画面
			Edit/View PROTO source —— 机器人结构信息，例如各个轮子电机的 name，后面配置差速控制器传入的参数就是这个
	[Webots 世界配置] 丢在 $(find teach_repeat)/worlds/tb3_wbt.wbt 里
		0、场景随便找个预设，添加预设里的 TurtleBot3Burger；
		1、初始位置 [x = 1.5, y = 0.5, z = 0]，方向 Quat[1, 0, 0, 0]；
		2、controller 选择 "ros"；
		3、controllerArgs 添加四个参数（作用详见 Webots + ROS 的笔记）：
			--use-ros-control
			--robot-description
			--auto-publish
			--name=tb3
		4、extensionSlot 里添加 JetBotRaspberryPiCamera (Solid)，配置改个合适的，这里定为：（这个相机似乎 x 轴是前方，z 轴向上，看需求可换原始的 Camera）
			translation 0.06, 0, -0.03
			rotation 0 0 1 0
			fieldOfView 2
			width 1920, height 860（改这两个需要保存后 reload）
			far 10
		5、运行起来有如下节点：/tb3
		6、以及如下 topic：
			/model_name
			/tb3/...
				一些零碎的 accelerometer/...、compass/...、gyro/...
				LDS_01/... 雷达相关的，没删的话会有，laser_scan、range_image 之类
				camera/... 摄像头，camera_info、image 之类
				left_wheel_motor/torque_feedback
				left_wheel_sensor/value
				right_wheel_motor/torque_feedback
				right_wheel_sensor/value
		7、还会包含如下 parameter：
			/tb3/robot_description 前面仿真器 controllerArgs 配好后会发布的机器人结构信息，后面会由 robot_state_publisher 节点转而发布为 tf 信息等
	[启动 tb3 仿真的 tb3.launch]
		0、参考 /opt/ros/noetic/share/webots_ros/launch/pioneer3at.launch 或 https://github.com/cyberbotics/webots_ros/blob/master/launch/pioneer3at.launch
		1、启动 Webots（从 webots_ros 中）
			<arg name="no_gui" default="false" doc="Start Webots with minimal GUI" />
			<include file="$(find webots_ros)/launch/webots.launch">
			    <arg name="mode" value="realtime" />
			    <arg name="no_gui" value="$(arg no_gui)" />
			    <arg name="world" value="$(find teach_repeat)/worlds/tb3_wbt.wbt" />
			</include>
			传入模式、是否需要 GUI 以及世界描述，启动后自动开始仿真
		2、启动 robot_state_publisher
			<node pkg="robot_state_publisher" type="robot_state_publisher" name="tb3_state_publisher" respawn="true" respawn_delay="5">
			    <remap from="robot_description" to="/tb3/robot_description" />
			</node>
			参数的 respawn 会反复尝试启动节点，因为要等仿真器加载出来才有 robot_description 参数
			启动后会有一些 topic：/joint_states/tf、/tf_static 从前面的 robot_description 参数里解析出来的坐标关系，给它发布出去，可以用 rosrun rqt_tf_tree rqt_tf_tree 查看
			或者不写 remap，把这个 node 放进 group ns="tb3" 上下文中（改成这样了，好处是 /joint_states 会发布到 /tb3/joint_states，更合理一点大概）
		2.1、雷达 tf 修正
			如果使用仿真器内的雷达，其运行时发布的 LaserScan 消息的 frame_id 是仿真器决定的，
			一般为 <robot_name>/<lidar_name>，例如 tb3/LDS_01（特殊符号全变下划线，例如这里 lidar_name 原本为 LDS-01；以及这里的 / 似乎就是名字的一部分，不代表什么层级关系？）
			但这个 frame 默认不存在于 tf 中，所以要手动发布一个，用 static_transform_publisher：
				<node pkg="tf" type="static_transform_publisher" name="tb3_lidar_tf" args="0 0 0 0 0 3.14 'LDS-01' 'tb3/LDS_01' 100" />
			具体的名字查看 /scan 消息的 frame_id 后确定，以及官方示例就是这样做的；
			[TODO] 这里还有个 pi 的 roll（？），不知道从何而来，但加了后是对的，不加的话建图乱飞。
			* 同理，其他设备例如 imu 等的带 frame_id 的数据也要类似处理；[TODO] 有没有更好的方法？
		3、差速控制器
			启动 controller_manager 下的 spawner，传入 args="controller"（这里 args 的名字就是发布话题的命名空间/子命名空间名）：
				<rosparam>
				    controller:
					type: "diff_drive_controller/DiffDriveController"
					left_wheel: ['left wheel motor']
					right_wheel: ['right wheel motor']
					pose_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 0.03]
					twist_covariance_diagonal: [0.001, 0.001, 1000000.0, 1000000.0, 1000000.0, 0.03]
				</rosparam>
			轮子关节电机配置找前述 PROTO source
			启动后会有如下 topic：
				/tb3/controller/...
					cmd_vel 最终暴露出的速度控制话题
					odom 里程计话题
					parameter_descriptions
					parameter_updates
			和一些 parameter：
				/tb3/controller/... 就是前面 rosparam 里面的五个东西
			* 存在问题：
				controller_manager 启动控制器分 Load 和 Start 两步，一步把控制器配置加载，一步启动；
				但一旦仿真中 reset（大左箭头，不是 reload）了，差速控制器节点还在，但 cmd_vel 话题没了（或者只有键盘控制在发布，没有订阅），
				查看 rostopic info，发现原本订阅它的 /tb3 变成了 None，感觉像是仿真端失去同步（雾）了；
				
				
				
				但在 rqt_controller_manager 中查看又发现是控制器自己停了（好像不止 Stop，还 Unload 了），再启动还能用。
					就是说，传给这个差速控制器的参数（param 里的 controller 的五项）里面包含轮子的节点（？）名，
					之前以为是 controller_manager 订阅 cmd_vel，计算后发给仿真器发的轮子驱动话题，
					但现在看似乎是 controller_manager 通知仿真器的 /tb3 去订阅 cmd_vel，自己不管，
					然后导致仿真器 reset 后遗忘了前面 controller_manager 对它的要求，不再订阅 cmd_vel，导致需要手动重启？
						[TODO]
						要研究的话应该得去看 controller_manager 的实现（没找到实现，只找到头文件）以及仿真器的 ros 控制器实现？
							https://github.com/ros-controls/ros_controllers
							/opt/ros/noetic/lib/controller_manager（spawner 之类在这）
						感觉相关：
							https://zhuanlan.zhihu.com/p/406419561 第六节
				
				
				
				* 一个粗糙的解决方法：
					没有先装一下：sudo apt install ros-noetic-rqt-controller-manager
					rosrun rqt_controller_manager rqt_controller_manager 启动可视化界面，仿真器 reset 后顺手把控制器也右键重开一下。
					进一步，直接加进 launch 文件：
						<node name="rqt_controller_manager" pkg="rqt_controller_manager" type="rqt_controller_manager" output="screen" />
		4、rviz 与 gmapping
			方便观察，加进去；
			gmapping 的输出在 launch 后的终端中有些混乱，但 output="log" 好像关不掉它的控制台输出。
	[键盘控制]
		rosrun teleop_twist_keyboard teleop_twist_keyboard.py cmd_vel:=/tb3/controller/cmd_vel
		速度按 z 可以降低个十次出头，仿真器就不会警告速度超出限制
		顺手也可以加进 launch 文件，启动后也可以正常接受键盘输入



[启动 data collect]
	[建立 dc_tb3.launch]
		修改原本的，把只定义单个参数的 rosparam 全换成 param，一些适合的加到 arg 里，然后用 $(arg xxx) 放进 param
			param 的 value="xxx" 里面可以有 $(arg xxx)、$(env xxx) 等替换参数
			rosparam 中也可以替换，不过需要专门 subst_value="True" 开启
			而且前者一般用于定义一个参数，后者一般用于定义整个 yaml，前者更合适，或者，晚点把所有相关的参数各写成一条 rosparam
	


[启动 data matching]
	[建立 dm_tb3.launch]
		同前修改一堆 param
	[TODO]
		一开始过了，但后来不知道改了什么跑不对了，回滚了 .wbt 文件就又好了；
		忘记留出错的文件没法复现，中间出现了估计在左侧但疯狂右转的行为；
		……
		又感觉没改什么，跑飞了，这次文件留下了；
		……
		再回滚跑一次也飞了，也就是说，同样的文件跑两次不一样了，再来一次又正常了；
		——
		又飞了，我非得看看难不成哪里有时间或者随机数吗？



[总启动流程]
	0、具体参数可能变更
	1、启动仿真环境
		看情况传参：
			roslaunch teach_repeat tb3_wbt.launch
			roslaunch teach_repeat tb3_wbt.launch rviz:=false
		如果需要 reset，先 Webots 中 reset 后，在 rqt_controller_manager 中重新启动 controller 控制器
	2、启动 teach
		roslaunch teach_repeat dc_tb3.launch
		roslaunch teach_repeat dc_tb3.launch teleop_keyboard:=false
	3.0、启动 gmapping
		roslaunch teach_repeat tb3_gmapping.launch
		给出一个 /map 方便查看，包括目标点也会发布到相对 /map 参考系下
	3、启动 repeat
		带上路径，例如：
		roslaunch teach_repeat dm_tb3.launch load_path:="/home/gralerfics/MyFiles/Workspace/tr_data/2023-12-07_22:28:59"



