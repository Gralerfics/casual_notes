// Generated by gencpp from file teach_repeat/SetGoalRequest.msg
// DO NOT EDIT!


#ifndef TEACH_REPEAT_MESSAGE_SETGOALREQUEST_H
#define TEACH_REPEAT_MESSAGE_SETGOALREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace teach_repeat
{
template <class ContainerAllocator>
struct SetGoalRequest_
{
  typedef SetGoalRequest_<ContainerAllocator> Type;

  SetGoalRequest_()
    : goalnum(0)  {
    }
  SetGoalRequest_(const ContainerAllocator& _alloc)
    : goalnum(0)  {
  (void)_alloc;
    }



   typedef int64_t _goalnum_type;
  _goalnum_type goalnum;





  typedef boost::shared_ptr< ::teach_repeat::SetGoalRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::teach_repeat::SetGoalRequest_<ContainerAllocator> const> ConstPtr;

}; // struct SetGoalRequest_

typedef ::teach_repeat::SetGoalRequest_<std::allocator<void> > SetGoalRequest;

typedef boost::shared_ptr< ::teach_repeat::SetGoalRequest > SetGoalRequestPtr;
typedef boost::shared_ptr< ::teach_repeat::SetGoalRequest const> SetGoalRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::teach_repeat::SetGoalRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::teach_repeat::SetGoalRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::teach_repeat::SetGoalRequest_<ContainerAllocator1> & lhs, const ::teach_repeat::SetGoalRequest_<ContainerAllocator2> & rhs)
{
  return lhs.goalnum == rhs.goalnum;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::teach_repeat::SetGoalRequest_<ContainerAllocator1> & lhs, const ::teach_repeat::SetGoalRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace teach_repeat

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::teach_repeat::SetGoalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::teach_repeat::SetGoalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teach_repeat::SetGoalRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::teach_repeat::SetGoalRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teach_repeat::SetGoalRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::teach_repeat::SetGoalRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::teach_repeat::SetGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "0418efd1c834644df492a5afb666ac39";
  }

  static const char* value(const ::teach_repeat::SetGoalRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x0418efd1c834644dULL;
  static const uint64_t static_value2 = 0xf492a5afb666ac39ULL;
};

template<class ContainerAllocator>
struct DataType< ::teach_repeat::SetGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "teach_repeat/SetGoalRequest";
  }

  static const char* value(const ::teach_repeat::SetGoalRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::teach_repeat::SetGoalRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int64 goalnum\n"
;
  }

  static const char* value(const ::teach_repeat::SetGoalRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::teach_repeat::SetGoalRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.goalnum);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct SetGoalRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::teach_repeat::SetGoalRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::teach_repeat::SetGoalRequest_<ContainerAllocator>& v)
  {
    s << indent << "goalnum: ";
    Printer<int64_t>::stream(s, indent + "  ", v.goalnum);
  }
};

} // namespace message_operations
} // namespace ros

#endif // TEACH_REPEAT_MESSAGE_SETGOALREQUEST_H
